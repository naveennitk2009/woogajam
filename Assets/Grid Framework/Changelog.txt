* Version 1.2.1 *
- updated the Lights Off example to use hex grids

* Version 1.2.0 *
- introducing hexagnal gids: use hexagons instead of rectangles for your grids. Comes with all the methods you've come to know from rectangular grids and uses a herringbone pattern as the coordiante system.
- the movement example scrits now take a GFGrid instead of a GFRectGrid, allowing the user to use both rectangular and hexagonal grids without changing the code

------------------------------------------------------------------------

* Version 1.1.10 *
- NEW METHOD ScaleVector3: lets you scale a Vector3 to the grid instead of a Transform

* Version 1.1.9 *
- NEW METHOD AlignVector3: lets you align a single point represented as a Vector3 instead of a Transform to a grid
- added the ability to lock a certain axis when calling AlignTransform and AlignVector3
- added a new constructor to both GFBoolVector3 and GFColorVector3 that lets you pass one parameter that gets applied to all components
- you can now lock axes in the Grid Align Panel as well
- aligning objects via the Grid Align Panel which already are in place won't do anything, meaning they won't create redundant Undo entries anymore
- fixed an issue in GetVectrosityPointsSeperate
- renamed the classes BoolVector3 and ColorVector3 to GFBoolVector3 and GFColorVector3 to avoid name collision
- size has always been a member of GFGrid, not GFRectGrid, I fixed that mistake in the documentation
- minor code cleanup and removing redundant code

* Version 1.1.8 *
- previously if you unloaded a level with a grid that was rendered the game could have crashed. Fixed that issue

* Version 1.1.7 *
- fixed a typo that prevented adding the GFGridRenderCamera component from the menu bar
- NEW EXAMPLE: design your levels in a plain text file and use Grid Framework and a text parser to build them during runtime. No need to change scnes when switching levels, faster than placing blocks by hand and great for user-made mods.
- NEW EXAMPLE: a continuation of the grid-based movment example where you can place obstacles on the grid and the sphere will avoid them. Works without using any physics or colliders. 

* Version 1.1.6 *
- IMPORTANT: The classes Grid and RectGrid have been renamed to GFGrid and GFRectGrid. This was done to prevent name collision with classes users might already be using or classes from other extensions. I apologize for the inconvenience.
- minor code cleanup and performance increase in GFRectGrid

* Version 1.1.5 *
- custom rendering range affects now drawing as well

* Version 1.1.4 *
- fixed an issue where lines with width would be renderd on top of objects enven though they should be underneath

* Version 1.1.3 *
- support for custom range for rendering instead of the grid's size
- from now on all files should install in the right place on their own, no more moving scripts manually

* Version 1.1.2 *
- integration into the menu bar
- Vectrosity support
- documentation split into a separate user manual and a scripting reference

* Version 1.1.1 *
- line width for rendering now possible

* Version 1.1.0 *
- introducing grid rendering
- new inspector panel for RectGrid

------------------------------------------------------------------------

* Version 1.0.1 *
- fixed rotation for cube shaped debug gizmos

* Version 1.0.0 *
- initial release